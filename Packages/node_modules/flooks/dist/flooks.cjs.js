'use strict';

var react = require('react');

var run = Symbol();
var ERR_PAYLOAD = 'payload should be an object';
var ERR_MODEL = 'model should be a function';
var ERR_KEYS = 'deps should be an array';
var ERR_OUT_MODEL = 'model passed to now() is not initialized';

var notObj = function notObj(val) {
  return Object.prototype.toString.call(val) !== '[object Object]';
};

var setLoading = function setLoading(litModel, key, loading) {
  litModel[key].loading = loading;
  var subs = litModel[run];
  var update = {};
  subs.forEach(function (_ref) {
    var deps = _ref.deps,
        setState = _ref.setState;
    if (!deps || deps.includes(key)) setState(update);
  });
};

var map = new WeakMap();

var useModel = function useModel(model, deps) {
  var __DEV__ = process.env.NODE_ENV !== 'production';

  if (__DEV__) {
    if (typeof model !== 'function') throw new Error(ERR_MODEL);
    if (deps !== undefined && !Array.isArray(deps)) throw new Error(ERR_KEYS);
  }

  var litModel = map.get(model);

  if (!litModel) {
    var proto = Object.defineProperty({}, run, {
      value: []
    });
    litModel = Object.setPrototypeOf({}, proto);

    var _now = function _now(next) {
      // get own
      if (next === undefined) return litModel; // get others

      if (typeof next === 'function') {
        var outModel = map.get(next);
        if (__DEV__ && !outModel) throw new Error(ERR_OUT_MODEL);
        return outModel;
      } // set own


      if (__DEV__ && notObj(next)) throw new Error(ERR_PAYLOAD);
      Object.assign(litModel, next);
      var subs = litModel[run];
      var nextKeys = Object.keys(next);
      var update = {};
      subs.forEach(function (_ref2) {
        var deps = _ref2.deps,
            setState = _ref2.setState;
        if (!deps || nextKeys.some(function (key) {
          return deps.includes(key);
        })) setState(update);
      });
    };

    var modelData = model(_now);
    Object.entries(modelData).forEach(function (_ref3) {
      var key = _ref3[0],
          val = _ref3[1];

      if (typeof val !== 'function') {
        litModel[key] = val;
      } else {
        litModel[key] = function () {
          var res = val.apply(void 0, arguments);
          if (!res || typeof res.then !== 'function') return res;
          setLoading(litModel, key, true);
          return res.finally(function () {
            setLoading(litModel, key, false);
          });
        };
      }
    });
    map.set(model, litModel);
  }

  var _useState = react.useState(),
      setState = _useState[1];

  react.useEffect(function () {
    if (deps && deps.length === 0) return;
    var subs = litModel[run];
    var item = {
      deps: deps,
      setState: setState
    };
    subs.push(item);
    return function () {
      subs.splice(subs.indexOf(item), 1);
    };
  }, []);
  return litModel;
};

module.exports = useModel;
