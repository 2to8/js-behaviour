(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('csharp'), require('puerts')) :
    typeof define === 'function' && define.amd ? define(['exports', 'csharp', 'puerts'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.index = {}, global.csharp, global.puerts));
}(this, (function (exports, csharp, puerts) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var puerts__namespace = /*#__PURE__*/_interopNamespace(puerts);

    var DebugLogText = csharp.NodeCanvas.Tasks.Actions.DebugLogText;
    var Debug$2 = csharp.UnityEngine.Debug;
    class DebugText extends DebugLogText {
        OnExecute() {
            Debug$2.Log(`[Js] ${this.log.value}`);
        }
    }

    csharp.Common.JSAdapter.sqlite3.Helpers;
    function isDefined(value) {
        return value !== undefined && value !== null && (!(value instanceof csharp.UnityEngine.Object) || !value?.Equals(null));
    }

    // https://stackoverflow.com/questions/42088007/is-there-source-map-support-for-typescript-in-node-nodemon
    var List$1 = csharp.System.Collections.Generic.List$1;
    global.process = global.process || {};
    process.env = process.env || {};
    if (!process.on) {
        Object.assign(process, {
            on: puerts.on, off: puerts.off, emit: puerts.emit,
        });
    }
    process.on('unhandledRejection', console.log);
    csharp.UnityEngine.Object.prototype.valueOf = function () {
        return this.Equals(null) ? null : this;
    };
    csharp.UnityEngine.GameObject.prototype['GetInChild'] =
        function ($type, $includeInactive) {
            if (!($type instanceof csharp.System.Type)) {
                $type = puerts.$typeof($type);
            }
            return this.GetComponentsInChildren($type);
        };
    csharp.System.Array.prototype[Symbol.iterator] = function* () {
        let _this = this;
        for (let i = 0; i < _this.Length; i++) {
            yield _this.GetValue(i);
        }
    };
    // Object.defineProperty(System.Array.prototype,Symbol.iterator,function() {
    //     let values = [];
    //     let iterator = this.GetEnumerator();
    //     while (iterator.MoveNext()) {
    //         let key = iterator.Current;
    //         values.push({ key: key, value: this.get_Item(key) });
    //     }
    //     return {
    //         index: 0, values: values, next() {
    //             let index = this.index++;
    //             return {
    //                 value: this.values[index], done: index >= this.values.length,
    //             };
    //         },
    //     }
    // } )
    csharp.UnityEngine.Transform.prototype[Symbol.iterator] = function () {
        let target = this;
        return (function* () {
            for (let i = 0; i < target.childCount; i++) {
                yield target.GetChild(i);
            }
        })();
    };
    // $extension(GameObject, TetrisUtil);
    // $extension(Transform, TetrisUtil);
    csharp.UnityEngine.GameObject.prototype[Symbol.iterator] = function () {
        let target = this.transform;
        return (function* () {
            for (let i = 0; i < target.childCount; i++) {
                yield target.GetChild(i);
            }
        })();
    };
    Object.defineProperty(csharp.System.Array.prototype, 'toArray', {
        enumerable: true, writable: true, value: function () {
            let arr = [];
            for (let i = 0n; i < this.Length; i++) {
                arr.push(this.GetValue(i));
            }
            return arr;
        },
    });
    if (List$1?.prototype != null) {
        Object.defineProperty(List$1.prototype, 'toArray', {
            enumerable: true, writable: true, value: function () {
                let arr = [];
                for (let i = 0; i < this.Count(); i++) {
                    arr.push(this.get_Item(i));
                }
                return arr;
            },
        });
    }
    Object.defineProperty(Object.prototype, 'tap', {
        value: function (intercept) {
            var val = (this instanceof Number || this instanceof String || this instanceof Boolean || this instanceof csharp.UnityEngine.Object) ? this.valueOf() : this;
            intercept(val);
            return val;
        }, enumerable: true, configurable: true, writable: true,
    });
    // https://gist.github.com/getify/9104721
    if (!(Symbol.iterator in Object.prototype)) {
        Object.defineProperty(Object.prototype, Symbol.iterator, {
            enumerable: true, writable: true, configurable: true,
            // https://twitter.com/juandopazo/status/436298238464122880
            value: function* () {
                var o = this;
                var ks = Object.keys(o);
                for (var idx = 0, length = ks.length; idx < length; idx++) {
                    yield o[ks[idx]];
                }
            },
        });
    }
    // Object.prototype.tap = function(intercept){
    //     var val = (this instanceof Number || this instanceof String || this instanceof Boolean ||
    // this instanceof UnityEngine.Object) ? this.valueOf() : this; intercept(val); return val; }
    // See if an array contains an object
    Array.prototype.contains = function (obj) {
        var i = this.length;
        while (i--) {
            if (this[i] === obj) {
                return true;
            }
        }
        return false;
    };
    // Global declaration
    //declare var IsDefined: typeof isDefined;
    // Global scope augmentation
    var window = window || null;
    const _global = (window || global);
    _global.IsDefined = isDefined;
    puerts__namespace.registerBuildinModule('path', {
        dirname(path) {
            return csharp.System.IO.Path.GetDirectoryName(path);
        }, resolve(dir, url) {
            url = url.replace(/\\/g, '/');
            while (url.startsWith('../')) {
                dir = csharp.System.IO.Path.GetDirectoryName(dir);
                url = url.substr(3);
            }
            return csharp.System.IO.Path.Combine(dir, url);
        },
    });
    puerts__namespace.registerBuildinModule('fs', {
        existsSync(path) {
            return csharp.System.IO.File.Exists(path);
        }, readFileSync(path) {
            return csharp.System.IO.File.ReadAllText(path);
        },
    });
    (function () {
        let global = this ?? globalThis;
        global['Buffer'] = global['Buffer'] ?? {};
    })();
    //sourceMapSupport.install();
    //import 'source-map-support/register'

    csharp.System.Collections.Generic.Dictionary$2;
    csharp.System.Collections.Generic.List$1;
    // #region Dictionary<TKey,TValue> 扩展, 替换 $generic 方法
    const srcGeneric = puerts.$generic;
    // cache types
    let list = new Array();
    globalThis.instances = globalThis.instances || new Set();
    globalThis.I = globalThis.I || function (c, ...args) {
        if (!globalThis.instances.has(c)) {
            globalThis.instances.set(c, args[0] instanceof c ? args[0] : new c(...args));
        }
        return globalThis.instances.get(c);
    };
    function cache(type) {
        if (!type)
            return false;
        for (let i = 0; i < list.length; i++) {
            if (type.Equals(list[i]))
                return false;
        }
        list.push(type);
        return true;
    }
    // overwrite generic method
    function generic(genericType, ...genericArguments) {
        let Class = srcGeneric(genericType, ...genericArguments);
        let type = puerts.$typeof(Class);
        if (genericArguments.length == 2 && cache(type)) {
            try {
                let dictType = puerts.$typeof(srcGeneric(csharp.System.Collections.Generic.Dictionary$2, ...genericArguments));
                if (dictType && dictType.IsAssignableFrom(type)) {
                    Class.prototype['forEach'] = function (callbackfn) {
                        let iterator = this.Keys.GetEnumerator();
                        while (iterator.MoveNext()) {
                            let key = iterator.Current;
                            let ret = callbackfn(this.get_Item(key), key);
                            if (ret !== void 0 && !ret)
                                break;
                        }
                    };
                    Class.prototype['getKeys'] = function () {
                        let result = [];
                        let iterator = this.Keys.GetEnumerator();
                        while (iterator.MoveNext()) {
                            result.push(iterator.Current);
                        }
                        return result;
                    };
                    Class.prototype['getValues'] = function () {
                        let result = [];
                        let iterator = this.Values.GetEnumerator();
                        while (iterator.MoveNext()) {
                            result.push(iterator.Current);
                        }
                        return result;
                    };
                    Class.prototype[Symbol.iterator] = function () {
                        let values = [];
                        let iterator = this.Keys.GetEnumerator();
                        while (iterator.MoveNext()) {
                            let key = iterator.Current;
                            values.push({ key: key, value: this.get_Item(key) });
                        }
                        return {
                            index: 0, values: values, next() {
                                let index = this.index++;
                                return {
                                    value: this.values[index], done: index >= this.values.length,
                                };
                            },
                        };
                    };
                }
            }
            catch (e) {
                console.warn(e);
            }
        }
        return Class;
    }
    // replace method
    (function () {
        let puerts = globalThis['puerts'];
        if (puerts && puerts['$generic'].toString() !== generic.toString()) {
            puerts['$generic'] = generic;
            puerts['$srcGeneric'] = srcGeneric;
        }
        else {
            console.log("puerts reloaded");
            //throw new Error('puerts is undefined or redefinition \'$generic\'');
        }
    })();
    // #endregion
    // #region Uint8Array 与 byte[] 类型互转
    function Uint8ArrayToBytes(data) {
        let result = csharp.System.Array.CreateInstance(puerts.$typeof(csharp.System.Byte), data.length);
        for (let i = 0; i < result.Length; i++) {
            result.set_Item(i, data[i]);
        }
        return result;
    }
    function BytesToUint8Array(data) {
        let result = new Uint8Array(data.Length);
        for (let i = 0; i < data.Length; i++) {
            result[i] = data.get_Item(i);
        }
        return result;
    }
    function dict_install() {
        //(function() {
        let csharp = globalThis['puerts'];
        csharp['Uint8ArrayToBytes'] = Uint8ArrayToBytes;
        csharp['BytesToUint8Array'] = BytesToUint8Array;
        //})()
    }
    //#endregion

    var TestCs2Ts$1 = csharp.Sandbox.TestCs2Ts;
    var Debug$1 = csharp.UnityEngine.Debug;
    class TestBind extends TestCs2Ts$1 {
        test2() {
            Debug$1.Log(this.num + " = test7..");
            this.num = 100;
            //
        }
    }

    function uses(...c) {
        c.forEach(type => {
            let pr = Object.getPrototypeOf(type.prototype);
            if (puerts.$typeof(pr.constructor) != null) {
                Object.getOwnPropertyNames(type.prototype).forEach(name => {
                    console.log(`[check] ${type.name}[${puerts.$typeof(pr.constructor).FullName}] => ${name}`);
                    pr[name] = type.prototype[name];
                });
                global.$providers.set(puerts.$typeof(pr.constructor).FullName, type);
            }
        });
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    /**
     * 组件接口，回调时机同unity的mono behaviour
     */
    class Component {
        BindProperty(instanceId) {
            console.log(`instanceId = ${instanceId}`);
            this.behaviour = csharp.Base.Runtime.JsBehaviourMgr.Instance.Get(instanceId);
            this.compInfo = this["componentInfo"];
            for (let propName in this.compInfo.properties) {
                const propInfo = this.compInfo.properties[propName];
                this[propInfo.name] = this.GetPropertyValue(propInfo);
            }
        }
        UnbindProperty() {
            for (let propName in this.compInfo.properties) {
                const propInfo = this.compInfo.properties[propName];
                this[propInfo.name] = undefined;
            }
        }
        GetPropertyValue(propInfo) {
            switch (propInfo.type) {
                case "System.Single":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetFloatList(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetFloat(propInfo.name);
                case "System.String":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetStringList(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetString(propInfo.name);
                case "System.Int32":
                case "System.UInt32":
                case "System.Int16":
                case "System.UInt16":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetIntList(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetInt(propInfo.name);
                case "System.Int64":
                case "System.UInt64":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetLongList(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetLong(propInfo.name);
                case "UnityEngine.Vector2":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetVector2List(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetVector2(propInfo.name);
                case "UnityEngine.Vector3":
                    return propInfo.isArray ?
                        this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetVector3List(propInfo.name)) :
                        this.behaviour.JsComponentProp.GetVector3(propInfo.name);
                default:
                    if (this.behaviour.JsComponentProp.IsUEObject(propInfo.type)) {
                        return propInfo.isArray ?
                            this.ConvertTypedListToArray(this.behaviour.JsComponentProp.GetUEObjectList(propInfo.name)) :
                            this.behaviour.JsComponentProp.GetUEObject(propInfo.name);
                    }
                    return undefined;
            }
        }
        ConvertTypedListToArray(list) {
            let array = [];
            if (list?.Data == null) {
                return array;
            }
            for (let i = 0; i < list?.Data.Count; ++i) {
                array.push(list.Data.get_Item(i));
            }
            return array;
        }
        compInfo;
        behaviour;
    }

    /**
     * 组件信息管理
     */
    class ComponentInfoMgr {
        /**
         * 获取指定名字的组件信息JSON字符串，名字为空时返回所有组件信息
         * @param componentName 组件名字
         * @returns json格式的组件信息字符串
         */
        getJsonString(componentName) {
            if (!componentName) {
                return JSON.stringify(this.componentInfos);
            }
            const componentInfo = this.componentInfos[componentName];
            if (!componentInfo) {
                return null;
            }
            return JSON.stringify(componentInfo);
        }
        /**
         * 获取指定名字的组件信息，名字不能为空
         * @param componentName 组件名
         * @returns 组件信息
         */
        getComponentInfo(componentName) {
            return this.componentInfos[componentName];
        }
        /**
         * 注册组件
         * @param name 组件名字
         * @param cls 组件类
         * @param path 组件在编辑器的inspector面板显示的索引路径
         */
        registerComponent(name, cls, path) {
            let compInfo = this.componentInfos[name];
            if (!compInfo) {
                compInfo = {
                    name,
                    path,
                    properties: {}
                };
                this.componentInfos[name] = compInfo;
            }
            if (cls) {
                this.componentClass[name] = cls;
            }
            compInfo.path = compInfo.path || path;
        }
        /**
         * 向组件中添加组件的属性信息
         * @param component 组件名字
         * @param propInfo 组件信息
         */
        addPropertyToComponent(component, propInfo) {
            this.registerComponent(component);
            const comp = this.componentInfos[component];
            comp.properties[propInfo.name] = propInfo;
        }
        /**
         * 查找组件构造函数
         * @param component 组件名
         * @returns 组件构造函数
         */
        findComponentConstructor(component) {
            return this.componentClass[component];
        }
        componentClass = {};
        componentInfos = {};
    }
    const compInfoMgr = new ComponentInfoMgr();

    /**
     * 组件类修饰器工厂，应用在非静态类上
     * @param componentPath 组件在编辑器的inspector面板显示的索引路径
     * @returns 组件修饰器
     */
    function component(componentPath) {
        return function (constructor) {
            compInfoMgr.registerComponent(constructor.name, constructor, componentPath);
            constructor.prototype.componentInfo = compInfoMgr.getComponentInfo(constructor.name);
        };
    }
    function property(arg) {
        return function (target, propertyKey) {
            let propInfo = null;
            if (typeof arg === 'function') {
                propInfo = {
                    name: propertyKey,
                    type: puerts.$typeof(arg).FullName,
                    isArray: false,
                };
            }
            else if (Array.isArray(arg)) {
                propInfo = {
                    name: propertyKey,
                    type: puerts.$typeof(arg[0]).FullName,
                    isArray: true,
                };
            }
            else {
                const isArray = Array.isArray(arg.type);
                propInfo = {
                    name: propertyKey,
                    type: isArray ? puerts.$typeof(arg.type[0]).FullName : puerts.$typeof(arg.type).FullName,
                    isArray: (arg.isArray === null || arg.isArray === undefined) ? isArray : arg.isArray,
                    editable: arg.editable
                };
            }
            compInfoMgr.addPropertyToComponent(target.constructor.name, propInfo);
        };
    }

    let UserBehaviour1 = class UserBehaviour1 {
    };
    UserBehaviour1 = __decorate([
        component('User')
    ], UserBehaviour1);
    let UserBehaviour2 = class UserBehaviour2 {
    };
    UserBehaviour2 = __decorate([
        component('User')
    ], UserBehaviour2);
    let UserBehaviour3 = class UserBehaviour3 {
    };
    UserBehaviour3 = __decorate([
        component('User')
    ], UserBehaviour3);
    let SystemBehaviour1 = class SystemBehaviour1 {
    };
    SystemBehaviour1 = __decorate([
        component('System')
    ], SystemBehaviour1);
    let SystemBehaviour2 = class SystemBehaviour2 {
    };
    SystemBehaviour2 = __decorate([
        component('System')
    ], SystemBehaviour2);
    let SystemBehaviour3 = class SystemBehaviour3 {
    };
    SystemBehaviour3 = __decorate([
        component('System')
    ], SystemBehaviour3);
    /**
     * 使用component修饰器定义TestBehaviour为Js组件
     */
    let TestBehaviour = class TestBehaviour extends Component {
        /**
         * 使用property修饰器定义需要在Inspector上显示的属性及其类型
         */
        prop1;
        /**
         * editable未实现，仅演示功能扩展模式
         */
        prop2;
        /**
         * 数组的几种定义形式
         */
        prop3;
        prop4;
        prop5;
        prop6;
        prop7;
        Awake() {
            //  let _功夫="如来神掌";
            // gf
            // logging_trace_with_error.js
            let test = {
                add(x, y) {
                    console.log(new Error().stack);
                    return x + y;
                },
                calc() {
                    return this.add(8, 11) + this.add(9, 14);
                },
                main() {
                    this.add(2, 3);
                    this.calc();
                },
            };
            global.testScript = (mb) => {
                mb.script = this;
                console.log('test hello');
                mb.script.SayHello();
            };
            test.main();
            console.log('Awake');
            //console.log(xxx.xxx);
            console.log(`prop1 = ${this.prop1}`);
            console.log(`prop2 = ${this.prop2}`);
            console.log(`prop3 = ${this.prop3}`);
            console.log(`prop4 = ${this.prop4.length}`);
            console.log(`prop5 = ${this.prop5}`);
            console.log(`prop6 = ${this.prop6}`);
            console.log(`prop7 = {${this.prop7.x}, ${this.prop7.y}, ${this.prop7.z}}`);
        }
        Start() {
            console.log('Start');
        }
        SayHello() {
            console.log('Hello, not bad!');
        }
        OnEnable() {
            console.log('OnEnable');
        }
        OnDisable() {
            console.log('OnDisable');
        }
        OnDestroy() {
            console.log('OnDestroy');
        }
    };
    __decorate([
        property(csharp.UnityEngine.GameObject)
    ], TestBehaviour.prototype, "prop1", void 0);
    __decorate([
        property({
            type: csharp.System.Single, editable: true,
        })
    ], TestBehaviour.prototype, "prop2", void 0);
    __decorate([
        property({
            type: csharp.UnityEngine.GameObject, isArray: true,
        })
    ], TestBehaviour.prototype, "prop3", void 0);
    __decorate([
        property([csharp.UnityEngine.Vector3])
    ], TestBehaviour.prototype, "prop4", void 0);
    __decorate([
        property({
            type: [csharp.System.UInt32],
        })
    ], TestBehaviour.prototype, "prop5", void 0);
    __decorate([
        property(csharp.UnityEngine.Camera)
    ], TestBehaviour.prototype, "prop6", void 0);
    __decorate([
        property(csharp.UnityEngine.Vector3)
    ], TestBehaviour.prototype, "prop7", void 0);
    TestBehaviour = __decorate([
        component()
    ], TestBehaviour);

    class ComponentInstMgr {
        /**
         * 给定一个组件类名，创建对应的实例
         * @param className 组件类名
         * @returns 返回实例ID
         */
        newComponent(className) {
            const componentCls = compInfoMgr.findComponentConstructor(className);
            if (!componentCls) {
                console.error(`cannot find component constructor ${className}.`);
                return InvalidComponentID;
            }
            const componentId = ++this.componentIdSeed;
            this.components[componentId] = new componentCls();
            return componentId;
        }
        /**
         * 删除一个组件实例
         * @param componentId 组件实例ID
         */
        delComponent(componentId) {
            delete this.components[componentId];
        }
        /**
         * 获取组件实例上的一个方法名
         * @param componentId 组件实例ID
         * @param methodName 方法名
         * @returns 绑定组件实例后的方法
         */
        getComponentMethod(componentId, methodName) {
            const componentInst = this.components[componentId];
            if (!componentInst) {
                console.error(`cannot find component with id ${componentId}.`);
                return undefined;
            }
            const method = componentInst[methodName];
            if (!method) {
                return undefined;
            }
            return method.bind(componentInst);
        }
        componentIdSeed = 0;
        components = {};
    }
    const InvalidComponentID = -1;
    const compInstMgr = new ComponentInstMgr;

    var Debug = csharp.UnityEngine.Debug;
    var TestCs2Ts = csharp.Sandbox.TestCs2Ts;
    global.$hello = (s) => {
        Debug.Log(`hello, ${s}`);
    };
    // TestCs2Ts.prototype.test = function() {
    //     Debug.Log(this.num + ' = test')
    //     this.num = 123;
    // }
    global.$testPrototype = function () {
        const p = Object.getOwnPropertyNames(TestBind.prototype);
        console.log(p); // [ 'constructor', 'echo', 'info' ]
        p.forEach(name => {
            Debug.Log(name);
            TestCs2Ts.prototype[name] = TestBind.prototype[name];
        });
    };
    // for (let i in p) {
    //     let name = p[i];
    //   
    // }
    dict_install();
    global.$providers = new Map();
    global.$require = (obj, fn, ...args) => {
        if (!global.$providers.has(obj.GetType().FullName)) {
            Debug.LogError(`${obj.GetType().FullName} 没有添加到 module 列表`);
            return;
        }
        obj[fn].call(obj, ...args);
    };
    //TestCs2Ts.prototype['test2'] = TestBind.prototype['test2'];
    global.$testBind = (obj) => {
        Debug.Log('test bind 5');
        Debug.Log(obj.num);
        obj.num = 5;
        obj.test2();
    };
    uses(//
    TestBind, //
    DebugText, //
    TestBehaviour, //
    UserBehaviour1, UserBehaviour2, UserBehaviour3, //
    SystemBehaviour1, SystemBehaviour2, SystemBehaviour3);

    exports.InvalidComponentID = InvalidComponentID;
    exports.compInfoMgr = compInfoMgr;
    exports.compInstMgr = compInstMgr;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.txt.map
