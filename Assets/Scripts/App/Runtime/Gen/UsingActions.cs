
namespace PuertsStaticWrap {

    public static partial class PuertsHelper {

        public static (int runtime, int editor) UsingActions(this Puerts.JsEnv jsEnv)
        {
            jsEnv.UsingAction<System.Reflection.Assembly, string, bool>();
            jsEnv.UsingAction<bool>();
            jsEnv.UsingAction<int>();
            jsEnv.UsingAction<string, bool, string>();
            jsEnv.UsingAction<string, string, UnityEngine.LogType>();
            jsEnv.UsingAction<UnityEngine.Rendering.AsyncGPUReadbackRequest>();
            jsEnv.UsingAction<UnityEngine.CullingGroupEvent>();
            jsEnv.UsingAction<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>();
            jsEnv.UsingAction<UnityEngine.CustomRenderTexture, int>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene>();
            jsEnv.UsingAction<bool, bool, int>();
            jsEnv.UsingAction<System.Object, bool>();
            jsEnv.UsingAction<long>();
//            jsEnv.UsingAction<int, System.Threading.Tasks.ParallelLoopState>();
//            jsEnv.UsingAction<long, System.Threading.Tasks.ParallelLoopState>();
//            jsEnv.UsingAction<int, System.Threading.Tasks.ParallelLoopState, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<long, System.Threading.Tasks.ParallelLoopState, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<int, System.Threading.Tasks.ParallelLoopState, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<long, System.Threading.Tasks.ParallelLoopState, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long, System.Threading.Tasks.Parallel.TLocal>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long>();
//            jsEnv.UsingAction<System.Threading.Tasks.Parallel.TSource, System.Threading.Tasks.ParallelLoopState, long, System.Threading.Tasks.Parallel.TLocal>();
            jsEnv.UsingAction<System.IntPtr>();
            jsEnv.UsingAction<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken>();
            jsEnv.UsingAction<UnityEngine.Experimental.Audio.AudioSampleProvider, uint>();
            jsEnv.UsingAction<System.IntPtr, uint, uint>();
            jsEnv.UsingAction<uint, System.IntPtr, uint>();
            jsEnv.UsingAction<string, bool>();
            jsEnv.UsingAction<string, bool, UnityEngine.Profiling.Experimental.DebugScreenCapture>();
            jsEnv.UsingAction<int, int>();
            jsEnv.UsingAction<UnityEngine.WSA.WindowActivationState>();
            jsEnv.UsingAction<UnityEngine.Windows.Speech.SpeechError>();
            jsEnv.UsingAction<UnityEngine.Windows.Speech.SpeechSystemStatus>();
            jsEnv.UsingAction<UnityEngine.Windows.Speech.PhraseRecognizedEventArgs>();
            jsEnv.UsingAction<string, UnityEngine.Windows.Speech.ConfidenceLevel>();
            jsEnv.UsingAction<UnityEngine.Windows.Speech.DictationCompletionCause>();
            jsEnv.UsingAction<string, int>();
            jsEnv.UsingAction<UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult>();
            jsEnv.UsingAction<UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult, UnityEngine.Windows.WebCam.PhotoCaptureFrame>();
            jsEnv.UsingAction<UnityEngine.Windows.WebCam.VideoCapture.VideoCaptureResult>();
            jsEnv.UsingAction<UnityEngine.Scripting.GarbageCollector.Mode>();
            jsEnv.UsingAction<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]>();
            jsEnv.UsingAction<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera>();
            jsEnv.UsingAction<UnityEngine.Light[], Unity.Collections.NativeArray<UnityEngine.Experimental.GlobalIllumination.LightDataGI>>();
            jsEnv.UsingAction<bool, string>();
            jsEnv.UsingAction<UnityEngine.Terrain, UnityEngine.RectInt, bool>();
            jsEnv.UsingAction<UnityEngine.Terrain, string, UnityEngine.RectInt, bool>();
            jsEnv.UsingAction<UnityEngine.UIElements.TimerState>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, float>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, UnityEngine.Rect>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, UnityEngine.Color>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion>();
            jsEnv.UsingAction<UnityEngine.UIElements.VisualElement, int>();
            jsEnv.UsingAction<float>();
            jsEnv.UsingAction<bool, string, UnityEngine.Networking.Match.MatchInfo>();
            jsEnv.UsingAction<bool, string, System.Collections.Generic.List<UnityEngine.Networking.Match.MatchInfoSnapshot>>();
            jsEnv.UsingAction<UnityEngine.Analytics.AnalyticsSessionState, long, long, bool>();
            jsEnv.UsingAction<UnityEngine.VFX.VFXOutputEventArgs>();
            jsEnv.UsingAction<UnityEngine.Video.VideoPlayer, double>();
            jsEnv.UsingAction<UnityEngine.Video.VideoPlayer, long>();
            jsEnv.UsingAction<UnityEngine.XR.XRNodeState>();
            jsEnv.UsingAction<UnityEngine.XR.InputDevice>();
            jsEnv.UsingAction<UnityEngine.XR.MeshGenerationResult>();
            jsEnv.UsingAction<string, UnityEngine.Rect>();
            jsEnv.UsingAction<int, UnityEngine.Rect>();
            jsEnv.UsingAction<System.Enum>();
            jsEnv.UsingAction<UnityEngine.Rect>();
            jsEnv.UsingAction<System.Object, string[], int>();
            jsEnv.UsingAction<UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Vector3>();
            jsEnv.UsingAction<float, UnityEngine.Color>();
            jsEnv.UsingAction<float, UnityEngine.Color, System.Single, System.Single>();
            jsEnv.UsingAction<int, byte[]>();
            jsEnv.UsingAction<UnityEngine.Object, bool>();
            jsEnv.UsingAction<UnityEngine.Playables.PlayableGraph>();
            jsEnv.UsingAction<UnityEngine.Vector3>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, bool>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, string>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.ParallelEnumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
//            jsEnv.UsingAction<System.Linq.Enumerable.TSource, int>();
            jsEnv.UsingAction<System.Net.ServicePoint, System.Net.IPEndPoint, int>();
            jsEnv.UsingAction<int, System.Net.WebHeaderCollection>();
            jsEnv.UsingAction<System.Object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors>();
            jsEnv.UsingAction<string, int, System.Char>();
            jsEnv.UsingAction<FlowCanvas.Flow>();
            jsEnv.UsingAction<UnityEngine.Transform, UnityEngine.Transform, bool, System.Object[]>();
            jsEnv.UsingAction<NodeCanvas.BehaviourTrees.BehaviourTree, NodeCanvas.Framework.Status>();
            jsEnv.UsingAction<NodeCanvas.Framework.Status>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.EventSystems.PointerEventData>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.EventSystems.BaseEventData>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.EventSystems.AxisEventData>>();
            jsEnv.UsingAction<ParadoxNotion.EventData>();
            jsEnv.UsingAction<ParadoxNotion.EventData<int>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.ControllerColliderHit>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.GameObject>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.Collision>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.Collision2D>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.Collider>>();
            jsEnv.UsingAction<ParadoxNotion.EventData<UnityEngine.Collider2D>>();
            jsEnv.UsingAction<ParadoxNotion.Services.Logger.Message>();
            jsEnv.UsingAction<int, bool>();
            jsEnv.UsingAction<FlyingWormConsole3.LiteNetLib.NetPeer, FlyingWormConsole3.LiteNetLib.DisconnectInfo>();
            jsEnv.UsingAction<FlyingWormConsole3.LiteNetLib.NetEndPoint, int>();
            jsEnv.UsingAction<FlyingWormConsole3.LiteNetLib.NetEndPoint, FlyingWormConsole3.LiteNetLib.Utils.NetDataReader, FlyingWormConsole3.LiteNetLib.UnconnectedMessageType>();
            jsEnv.UsingAction<FlyingWormConsole3.LiteNetLib.NetPeer, int>();
            jsEnv.UsingAction<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>();
            jsEnv.UsingAction<int, int, int>();
            jsEnv.UsingAction<System.Collections.Generic.List<System.Collections.Generic.List<int>>, System.Collections.Generic.List<int>, int>();
            jsEnv.UsingAction<System.Nullable<bool>>();
            jsEnv.UsingAction<System.IntPtr, Puerts.IGetValueFromJs, System.IntPtr, bool>();
            jsEnv.UsingAction<UnityEngine.Rect, string>();
            jsEnv.UsingAction<UnityRoyale.CardData, UnityEngine.Vector3, UnityRoyale.Placeable.Faction>();
            jsEnv.UsingAction<int, UnityEngine.Vector2>();
            jsEnv.UsingAction<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle, System.Exception>();
            jsEnv.UsingAction<UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext>();
            jsEnv.UsingAction<int, string>();
            jsEnv.UsingAction<UnityEngine.Monetization.ShowResult>();
            jsEnv.UsingAction<string, System.Object, bool>();
            jsEnv.UsingAction<UnityEngine.Vector2Int>();
            jsEnv.UsingAction<UnityEngine.Rendering.RTHandleSystem, int>();
            jsEnv.UsingAction<UnityEngine.Rendering.RenderTargetIdentifier, UnityEngine.Rendering.CommandBuffer>();
            jsEnv.UsingAction<UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent>();
            jsEnv.UsingAction<UnityEngine.Advertisements.ShowResult>();
            jsEnv.UsingAction<UnityEngine.Camera, UnityEngine.Vector2>();
            jsEnv.UsingAction<UnityEngine.Vector2>();
            jsEnv.UsingAction<double>();
            jsEnv.UsingAction<uint>();
            jsEnv.UsingAction<ulong>();
            jsEnv.UsingAction<UnityEngine.Vector4>();
            jsEnv.UsingAction<UnityEngine.Quaternion>();
            jsEnv.UsingAction<UnityEngine.Color>();
            jsEnv.UsingAction<UnityEngine.LogType, System.Object>();
            jsEnv.UsingAction<float, float, float, float>();
            jsEnv.UsingAction<DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Tween, UnityEngine.Quaternion, UnityEngine.Transform>();
            //jsEnv.UsingAction<DG.DemiEditor.DeGUINodeSystem.NodeProcess.GUIChangeType>();
            jsEnv.UsingAction<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors>();
            jsEnv.UsingAction<System.IntPtr, System.IntPtr>();
#if UNITY_EDITOR
            jsEnv.UsingAction<UnityEditor.BuildPlayerOptions>();
            jsEnv.UsingAction<UnityEditor.PauseState>();
            jsEnv.UsingAction<UnityEditor.PlayModeStateChange>();
            jsEnv.UsingAction<UnityEditor.MaterialProperty, int, System.Object>();
            jsEnv.UsingAction<UnityEngine.AnimationClip, UnityEditor.EditorCurveBinding, UnityEditor.AnimationUtility.CurveModifiedType>();
            jsEnv.UsingAction<UnityEditor.SceneView.CameraMode>();
            jsEnv.UsingAction<UnityEditor.CacheServerConnectionChangedParameters>();
            jsEnv.UsingAction<UnityEditor.ModeService.ModeChangedArgs>();
            jsEnv.UsingAction<int, UnityEditor.MPE.ProcessState>();
            jsEnv.UsingAction<UnityEditor.ShortcutManagement.ActiveProfileChangedEventArgs>();
            jsEnv.UsingAction<UnityEditor.ShortcutManagement.ShortcutBindingChangedEventArgs>();
            jsEnv.UsingAction<UnityEditor.Connect.UnityOAuth.AuthCodeResponse>();
            jsEnv.UsingAction<UnityEditor.SearchService.ObjectSelectorTargetInfo, UnityEngine.Object[], UnityEditor.SearchService.ObjectSelectorSearchContext>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, UnityEditor.SceneManagement.NewSceneSetup, UnityEditor.SceneManagement.NewSceneMode>();
            jsEnv.UsingAction<string, UnityEditor.SceneManagement.OpenSceneMode>();
            jsEnv.UsingAction<UnityEngine.SceneManagement.Scene, UnityEditor.SceneManagement.OpenSceneMode>();
            jsEnv.UsingAction<UnityEditor.GenericMenu, UnityEngine.SceneManagement.Scene>();
            jsEnv.UsingAction<UnityEditor.GenericMenu, UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>();
            jsEnv.UsingAction<UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>();
            jsEnv.UsingAction<UnityEditor.Compilation.CodeOptimization>();
            jsEnv.UsingAction<UnityEditor.CacheServerConnectionChangedParameters>();
            jsEnv.UsingAction<UnityEditor.Experimental.GraphView.NodeCreationContext>();
            jsEnv.UsingAction<UnityEditor.Experimental.GraphView.GraphViewChange>();
            jsEnv.UsingAction<UnityEditor.Experimental.GraphView.StackNode, int, System.Collections.Generic.IEnumerable<UnityEditor.Experimental.GraphView.GraphElement>>();
            jsEnv.UsingAction<string, UnityEditor.Experimental.GraphView.GraphView.AskUser>();
            jsEnv.UsingAction<UnityEditor.Experimental.GraphView.Blackboard, int, UnityEngine.UIElements.VisualElement>();
            jsEnv.UsingAction<UnityEditor.SceneTemplate.SceneTemplateAsset, string, bool>();
            jsEnv.UsingAction<UnityEditor.SceneTemplate.SceneTemplateAsset, UnityEngine.SceneManagement.Scene, UnityEditor.SceneAsset, bool>();
            //jsEnv.UsingAction<UnityEditor.Graphs.Explore.SearchEvent>();
            jsEnv.UsingAction<UnityEditor.AddressableAssets.Settings.AddressableAssetSettings, UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent, System.Object>();
            jsEnv.UsingAction<UnityEditor.ShaderGraph.Internal.ConcretePrecision>();
            jsEnv.UsingAction<UnityEditor.GUID, UnityEditor.Build.Pipeline.Tasks.CalculateCustomDependencyData>();
            //jsEnv.UsingAction<UnityEditor.AssetImporters.AssetImportContext, string, bool, string, float, UnityEngine.Light, UnityEngine.Texture>();
            jsEnv.UsingAction<UnityEditor.Rendering.LookDev.Layout, UnityEditor.Rendering.LookDev.SidePanel>();
            jsEnv.UsingAction<UnityEngine.GameObject, UnityEditor.Rendering.LookDev.ViewCompositionIndex, UnityEngine.Vector2>();
            jsEnv.UsingAction<UnityEngine.Object, UnityEditor.Rendering.LookDev.ViewCompositionIndex, UnityEngine.Vector2>();
#endif
            return (267, 36);
        }

    }

    }
